/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const IOC_IN: i32 = 1073741824;
pub const IOC_OUT: i64 = 2147483648;
pub const IOC_INOUT: i64 = 3221225472;
pub const IOCSIZE_MASK: i32 = 1073676288;
pub const IOCSIZE_SHIFT: i32 = 16;
pub const IORING_FILE_INDEX_ALLOC: i32 = -1;
pub const IORING_SETUP_IOPOLL: i32 = 1;
pub const IORING_SETUP_SQPOLL: i32 = 2;
pub const IORING_SETUP_SQ_AFF: i32 = 4;
pub const IORING_SETUP_CQSIZE: i32 = 8;
pub const IORING_SETUP_CLAMP: i32 = 16;
pub const IORING_SETUP_ATTACH_WQ: i32 = 32;
pub const IORING_SETUP_R_DISABLED: i32 = 64;
pub const IORING_SETUP_SUBMIT_ALL: i32 = 128;
pub const IORING_SETUP_COOP_TASKRUN: i32 = 256;
pub const IORING_SETUP_TASKRUN_FLAG: i32 = 512;
pub const IORING_SETUP_SQE128: i32 = 1024;
pub const IORING_SETUP_CQE32: i32 = 2048;
pub const IORING_SETUP_SINGLE_ISSUER: i32 = 4096;
pub const IORING_SETUP_DEFER_TASKRUN: i32 = 8192;
pub const IORING_URING_CMD_FIXED: i32 = 1;
pub const IORING_FSYNC_DATASYNC: i32 = 1;
pub const IORING_TIMEOUT_ABS: i32 = 1;
pub const IORING_TIMEOUT_UPDATE: i32 = 2;
pub const IORING_TIMEOUT_BOOTTIME: i32 = 4;
pub const IORING_TIMEOUT_REALTIME: i32 = 8;
pub const IORING_LINK_TIMEOUT_UPDATE: i32 = 16;
pub const IORING_TIMEOUT_ETIME_SUCCESS: i32 = 32;
pub const IORING_TIMEOUT_CLOCK_MASK: i32 = 12;
pub const IORING_TIMEOUT_UPDATE_MASK: i32 = 18;
pub const IORING_POLL_ADD_MULTI: i32 = 1;
pub const IORING_POLL_UPDATE_EVENTS: i32 = 2;
pub const IORING_POLL_UPDATE_USER_DATA: i32 = 4;
pub const IORING_POLL_ADD_LEVEL: i32 = 8;
pub const IORING_ASYNC_CANCEL_ALL: i32 = 1;
pub const IORING_ASYNC_CANCEL_FD: i32 = 2;
pub const IORING_ASYNC_CANCEL_ANY: i32 = 4;
pub const IORING_ASYNC_CANCEL_FD_FIXED: i32 = 8;
pub const IORING_RECVSEND_POLL_FIRST: i32 = 1;
pub const IORING_RECV_MULTISHOT: i32 = 2;
pub const IORING_RECVSEND_FIXED_BUF: i32 = 4;
pub const IORING_ACCEPT_MULTISHOT: i32 = 1;
pub const IORING_MSG_RING_CQE_SKIP: i32 = 1;
pub const IORING_CQE_F_BUFFER: i32 = 1;
pub const IORING_CQE_F_MORE: i32 = 2;
pub const IORING_CQE_F_SOCK_NONEMPTY: i32 = 4;
pub const IORING_CQE_F_NOTIF: i32 = 8;
pub const IORING_OFF_SQ_RING: i32 = 0;
pub const IORING_OFF_CQ_RING: i32 = 134217728;
pub const IORING_OFF_SQES: i32 = 268435456;
pub const IORING_SQ_NEED_WAKEUP: i32 = 1;
pub const IORING_SQ_CQ_OVERFLOW: i32 = 2;
pub const IORING_SQ_TASKRUN: i32 = 4;
pub const IORING_CQ_EVENTFD_DISABLED: i32 = 1;
pub const IORING_ENTER_GETEVENTS: i32 = 1;
pub const IORING_ENTER_SQ_WAKEUP: i32 = 2;
pub const IORING_ENTER_SQ_WAIT: i32 = 4;
pub const IORING_ENTER_EXT_ARG: i32 = 8;
pub const IORING_ENTER_REGISTERED_RING: i32 = 16;
pub const IORING_FEAT_SINGLE_MMAP: i32 = 1;
pub const IORING_FEAT_NODROP: i32 = 2;
pub const IORING_FEAT_SUBMIT_STABLE: i32 = 4;
pub const IORING_FEAT_RW_CUR_POS: i32 = 8;
pub const IORING_FEAT_CUR_PERSONALITY: i32 = 16;
pub const IORING_FEAT_FAST_POLL: i32 = 32;
pub const IORING_FEAT_POLL_32BITS: i32 = 64;
pub const IORING_FEAT_SQPOLL_NONFIXED: i32 = 128;
pub const IORING_FEAT_EXT_ARG: i32 = 256;
pub const IORING_FEAT_NATIVE_WORKERS: i32 = 512;
pub const IORING_FEAT_RSRC_TAGS: i32 = 1024;
pub const IORING_FEAT_CQE_SKIP: i32 = 2048;
pub const IORING_FEAT_LINKED_FILE: i32 = 4096;
pub const IORING_RSRC_REGISTER_SPARSE: i32 = 1;
pub const IORING_REGISTER_FILES_SKIP: i32 = -2;
pub const IO_URING_OP_SUPPORTED: i32 = 1;
pub type __u8 = ::core::ffi::c_uchar;
pub type __u16 = ::core::ffi::c_ushort;
pub type __s32 = ::core::ffi::c_int;
pub type __u32 = ::core::ffi::c_uint;
pub type __u64 = ::core::ffi::c_ulonglong;
pub type __kernel_rwf_t = ::core::ffi::c_int;
#[repr(C)]
pub struct io_uring_sqe {
    pub opcode: __u8,
    pub flags: __u8,
    pub ioprio: __u16,
    pub fd: __s32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1,
    pub __bindgen_anon_2: io_uring_sqe__bindgen_ty_2,
    pub len: __u32,
    pub __bindgen_anon_3: io_uring_sqe__bindgen_ty_3,
    pub user_data: __u64,
    pub __bindgen_anon_4: io_uring_sqe__bindgen_ty_4,
    pub personality: __u16,
    pub __bindgen_anon_5: io_uring_sqe__bindgen_ty_5,
    pub __bindgen_anon_6: io_uring_sqe__bindgen_ty_6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_1 {
    pub off: __u64,
    pub addr2: __u64,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_1__bindgen_ty_1 {
    pub cmd_op: __u32,
    pub __pad1: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_2 {
    pub addr: __u64,
    pub splice_off_in: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_3 {
    pub rw_flags: __kernel_rwf_t,
    pub fsync_flags: __u32,
    pub poll_events: __u16,
    pub poll32_events: __u32,
    pub sync_range_flags: __u32,
    pub msg_flags: __u32,
    pub timeout_flags: __u32,
    pub accept_flags: __u32,
    pub cancel_flags: __u32,
    pub open_flags: __u32,
    pub statx_flags: __u32,
    pub fadvise_advice: __u32,
    pub splice_flags: __u32,
    pub rename_flags: __u32,
    pub unlink_flags: __u32,
    pub hardlink_flags: __u32,
    pub xattr_flags: __u32,
    pub msg_ring_flags: __u32,
    pub uring_cmd_flags: __u32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_4 {
    pub buf_index: __u16,
    pub buf_group: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_5 {
    pub splice_fd_in: __s32,
    pub file_index: __u32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_5__bindgen_ty_1 {
    pub addr_len: __u16,
    pub __pad3: [__u16; 1usize],
}
#[repr(C)]
pub struct io_uring_sqe__bindgen_ty_6 {
    pub __bindgen_anon_1: __BindgenUnionField<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>,
    pub cmd: __BindgenUnionField<[__u8; 0usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_6__bindgen_ty_1 {
    pub addr3: __u64,
    pub __pad2: [__u64; 1usize],
}
pub const IOSQE_FIXED_FILE_BIT: _bindgen_ty_1 = 0;
pub const IOSQE_IO_DRAIN_BIT: _bindgen_ty_1 = 1;
pub const IOSQE_IO_LINK_BIT: _bindgen_ty_1 = 2;
pub const IOSQE_IO_HARDLINK_BIT: _bindgen_ty_1 = 3;
pub const IOSQE_ASYNC_BIT: _bindgen_ty_1 = 4;
pub const IOSQE_BUFFER_SELECT_BIT: _bindgen_ty_1 = 5;
pub const IOSQE_CQE_SKIP_SUCCESS_BIT: _bindgen_ty_1 = 6;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub const io_uring_op_IORING_OP_NOP: io_uring_op = 0;
pub const io_uring_op_IORING_OP_READV: io_uring_op = 1;
pub const io_uring_op_IORING_OP_WRITEV: io_uring_op = 2;
pub const io_uring_op_IORING_OP_FSYNC: io_uring_op = 3;
pub const io_uring_op_IORING_OP_READ_FIXED: io_uring_op = 4;
pub const io_uring_op_IORING_OP_WRITE_FIXED: io_uring_op = 5;
pub const io_uring_op_IORING_OP_POLL_ADD: io_uring_op = 6;
pub const io_uring_op_IORING_OP_POLL_REMOVE: io_uring_op = 7;
pub const io_uring_op_IORING_OP_SYNC_FILE_RANGE: io_uring_op = 8;
pub const io_uring_op_IORING_OP_SENDMSG: io_uring_op = 9;
pub const io_uring_op_IORING_OP_RECVMSG: io_uring_op = 10;
pub const io_uring_op_IORING_OP_TIMEOUT: io_uring_op = 11;
pub const io_uring_op_IORING_OP_TIMEOUT_REMOVE: io_uring_op = 12;
pub const io_uring_op_IORING_OP_ACCEPT: io_uring_op = 13;
pub const io_uring_op_IORING_OP_ASYNC_CANCEL: io_uring_op = 14;
pub const io_uring_op_IORING_OP_LINK_TIMEOUT: io_uring_op = 15;
pub const io_uring_op_IORING_OP_CONNECT: io_uring_op = 16;
pub const io_uring_op_IORING_OP_FALLOCATE: io_uring_op = 17;
pub const io_uring_op_IORING_OP_OPENAT: io_uring_op = 18;
pub const io_uring_op_IORING_OP_CLOSE: io_uring_op = 19;
pub const io_uring_op_IORING_OP_FILES_UPDATE: io_uring_op = 20;
pub const io_uring_op_IORING_OP_STATX: io_uring_op = 21;
pub const io_uring_op_IORING_OP_READ: io_uring_op = 22;
pub const io_uring_op_IORING_OP_WRITE: io_uring_op = 23;
pub const io_uring_op_IORING_OP_FADVISE: io_uring_op = 24;
pub const io_uring_op_IORING_OP_MADVISE: io_uring_op = 25;
pub const io_uring_op_IORING_OP_SEND: io_uring_op = 26;
pub const io_uring_op_IORING_OP_RECV: io_uring_op = 27;
pub const io_uring_op_IORING_OP_OPENAT2: io_uring_op = 28;
pub const io_uring_op_IORING_OP_EPOLL_CTL: io_uring_op = 29;
pub const io_uring_op_IORING_OP_SPLICE: io_uring_op = 30;
pub const io_uring_op_IORING_OP_PROVIDE_BUFFERS: io_uring_op = 31;
pub const io_uring_op_IORING_OP_REMOVE_BUFFERS: io_uring_op = 32;
pub const io_uring_op_IORING_OP_TEE: io_uring_op = 33;
pub const io_uring_op_IORING_OP_SHUTDOWN: io_uring_op = 34;
pub const io_uring_op_IORING_OP_RENAMEAT: io_uring_op = 35;
pub const io_uring_op_IORING_OP_UNLINKAT: io_uring_op = 36;
pub const io_uring_op_IORING_OP_MKDIRAT: io_uring_op = 37;
pub const io_uring_op_IORING_OP_SYMLINKAT: io_uring_op = 38;
pub const io_uring_op_IORING_OP_LINKAT: io_uring_op = 39;
pub const io_uring_op_IORING_OP_MSG_RING: io_uring_op = 40;
pub const io_uring_op_IORING_OP_FSETXATTR: io_uring_op = 41;
pub const io_uring_op_IORING_OP_SETXATTR: io_uring_op = 42;
pub const io_uring_op_IORING_OP_FGETXATTR: io_uring_op = 43;
pub const io_uring_op_IORING_OP_GETXATTR: io_uring_op = 44;
pub const io_uring_op_IORING_OP_SOCKET: io_uring_op = 45;
pub const io_uring_op_IORING_OP_URING_CMD: io_uring_op = 46;
pub const io_uring_op_IORING_OP_SEND_ZC: io_uring_op = 47;
pub const io_uring_op_IORING_OP_SENDMSG_ZC: io_uring_op = 48;
pub const io_uring_op_IORING_OP_LAST: io_uring_op = 49;
pub type io_uring_op = ::core::ffi::c_uint;
pub const IORING_MSG_DATA: _bindgen_ty_2 = 0;
pub const IORING_MSG_SEND_FD: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct io_uring_cqe {
    pub user_data: __u64,
    pub res: __s32,
    pub flags: __u32,
    pub big_cqe: __IncompleteArrayField<__u64>,
}
pub const IORING_CQE_BUFFER_SHIFT: _bindgen_ty_3 = 16;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_sqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub flags: __u32,
    pub dropped: __u32,
    pub array: __u32,
    pub resv1: __u32,
    pub resv2: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_cqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub overflow: __u32,
    pub cqes: __u32,
    pub flags: __u32,
    pub resv1: __u32,
    pub resv2: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_params {
    pub sq_entries: __u32,
    pub cq_entries: __u32,
    pub flags: __u32,
    pub sq_thread_cpu: __u32,
    pub sq_thread_idle: __u32,
    pub features: __u32,
    pub wq_fd: __u32,
    pub resv: [__u32; 3usize],
    pub sq_off: io_sqring_offsets,
    pub cq_off: io_cqring_offsets,
}
pub const IORING_REGISTER_BUFFERS: _bindgen_ty_4 = 0;
pub const IORING_UNREGISTER_BUFFERS: _bindgen_ty_4 = 1;
pub const IORING_REGISTER_FILES: _bindgen_ty_4 = 2;
pub const IORING_UNREGISTER_FILES: _bindgen_ty_4 = 3;
pub const IORING_REGISTER_EVENTFD: _bindgen_ty_4 = 4;
pub const IORING_UNREGISTER_EVENTFD: _bindgen_ty_4 = 5;
pub const IORING_REGISTER_FILES_UPDATE: _bindgen_ty_4 = 6;
pub const IORING_REGISTER_EVENTFD_ASYNC: _bindgen_ty_4 = 7;
pub const IORING_REGISTER_PROBE: _bindgen_ty_4 = 8;
pub const IORING_REGISTER_PERSONALITY: _bindgen_ty_4 = 9;
pub const IORING_UNREGISTER_PERSONALITY: _bindgen_ty_4 = 10;
pub const IORING_REGISTER_RESTRICTIONS: _bindgen_ty_4 = 11;
pub const IORING_REGISTER_ENABLE_RINGS: _bindgen_ty_4 = 12;
pub const IORING_REGISTER_FILES2: _bindgen_ty_4 = 13;
pub const IORING_REGISTER_FILES_UPDATE2: _bindgen_ty_4 = 14;
pub const IORING_REGISTER_BUFFERS2: _bindgen_ty_4 = 15;
pub const IORING_REGISTER_BUFFERS_UPDATE: _bindgen_ty_4 = 16;
pub const IORING_REGISTER_IOWQ_AFF: _bindgen_ty_4 = 17;
pub const IORING_UNREGISTER_IOWQ_AFF: _bindgen_ty_4 = 18;
pub const IORING_REGISTER_IOWQ_MAX_WORKERS: _bindgen_ty_4 = 19;
pub const IORING_REGISTER_RING_FDS: _bindgen_ty_4 = 20;
pub const IORING_UNREGISTER_RING_FDS: _bindgen_ty_4 = 21;
pub const IORING_REGISTER_PBUF_RING: _bindgen_ty_4 = 22;
pub const IORING_UNREGISTER_PBUF_RING: _bindgen_ty_4 = 23;
pub const IORING_REGISTER_SYNC_CANCEL: _bindgen_ty_4 = 24;
pub const IORING_REGISTER_FILE_ALLOC_RANGE: _bindgen_ty_4 = 25;
pub const IORING_REGISTER_LAST: _bindgen_ty_4 = 26;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
pub const IO_WQ_BOUND: _bindgen_ty_5 = 0;
pub const IO_WQ_UNBOUND: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = ::core::ffi::c_uint;
pub const IORING_RESTRICTION_REGISTER_OP: _bindgen_ty_6 = 0;
pub const IORING_RESTRICTION_SQE_OP: _bindgen_ty_6 = 1;
pub const IORING_RESTRICTION_SQE_FLAGS_ALLOWED: _bindgen_ty_6 = 2;
pub const IORING_RESTRICTION_SQE_FLAGS_REQUIRED: _bindgen_ty_6 = 3;
pub const IORING_RESTRICTION_LAST: _bindgen_ty_6 = 4;
pub type _bindgen_ty_6 = ::core::ffi::c_uint;
